/* eslint-disable no-undef */
/* eslint-disable no-unused-vars */
/* eslint-disable react/react-in-jsx-scope */
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { Card, Col, Container, Row } from 'react-bootstrap'
import { GetStaticProps, InferGetStaticPropsType } from 'next'
import MovieButtonBack from '@/pages/movie/components/MovieButtonBack'
import fetchLatestMovie from '@/lib/movie/fetchLatestMovie'
import InfiniteScroll from 'react-infinite-scroll-component'
import MovieCardItems from '../movie/components/MovieCardItems'

type MoviesProps = { movies: Movies[] }

export const MovieHeading = () => {
    return (
        <Row className="justify-content-start g-2 py-3">
            <Col>
                <Card
                    style={{
                        width: '100%',
                        height: 'auto',
                        backgroundColor: '#0f0f0f',
                        borderRadius: '0',
                    }}
                >
                    <Card.Body>
                        <MovieButtonBack />
                        <hr className="text-white-50" />
                    </Card.Body>
                </Card>
            </Col>
        </Row>
    )
}

export const Movies = ({ movies }: MoviesProps) => {
    const [items, setItems] = useState<Movies[]>(movies)
    const [newItems, setNewItems] = useState<Movies[]>([])
    const [page, setPage] = useState<number>(1)

    useEffect(() => {
        const fetchData = async () => {
            const api: string = 'http://localhost:5000'
            const endpoint: string = 'recent-release/movies'
            const response: Response = await fetch(
                `${api}/${endpoint}?page=${page}`
            )

            const newMovies: Movies[] = await response.json()
            setNewItems(newMovies)
        }

        fetchData()
    }, [page])

    const fetchMoreData = () => {
        setTimeout(() => {
            setItems([...items, ...newItems])
            setPage(page + 1)

            window.scrollTo({ behavior: 'smooth' })
        }, 500)
    }

    return (
        <Row className="justify-content-start py-3 g-2">
            <Col>
                <Card
                    body
                    style={{
                        width: '100%',
                        height: 'auto',
                        backgroundColor: '#0f0f0f',
                        borderRadius: '0',
                    }}
                >
                    <Card.Title className="text-white text-uppercase text-wrap mb-3">
                        Kumpulan Film Terbaru dan Terlengkap
                    </Card.Title>
                    <hr className="text-white-50" />
                    <InfiniteScroll
                        dataLength={items ? items.length : 0}
                        next={fetchMoreData}
                        hasMore={true}
                        loader={
                            <>
                                {items ? (
                                    <div className="d-flex justify-content-center mx-auto py-5 text-white-50">
                                        Sedang Memuat...
                                    </div>
                                ) : (
                                    <div className="text-white-50 mb-3">
                                        {JSON.stringify(items)}
                                    </div>
                                )}
                            </>
                        }
                        style={{ overflow: 'hidden' }}
                    >
                        <div className="row row-cols-2 row-cols-lg-6 justify-content-arround g-3 py-3">
                            {items?.map((item, index) => (
                                <div key={index} className="col">
                                    <MovieCardItems items={item} />
                                </div>
                            ))}
                        </div>
                    </InfiniteScroll>
                </Card>
            </Col>
        </Row>
    )
}

export default function LatestMovie({
    movies: initialMovies,
}: InferGetStaticPropsType<typeof getStaticProps>) {
    return (
        <>
            <Head>
                <title>Kumpulan Film Terbaru dan Terlengkap</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Container className="position-relative py-5">
                <MovieHeading />
                <Movies movies={initialMovies} />
            </Container>
        </>
    )
}

export const getStaticProps: GetStaticProps<MoviesProps> = async () => {
    const movies: Movies[] = await fetchLatestMovie()

    return { props: { movies }, revalidate: 3600 }
}
