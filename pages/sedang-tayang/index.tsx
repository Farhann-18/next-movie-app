/* eslint-disable no-undef */
/* eslint-disable no-unused-vars */
/* eslint-disable react/react-in-jsx-scope */
import Head from 'next/head'
import { useState } from 'react'
import { Card, Col, Container, Row } from 'react-bootstrap'
import { GetServerSideProps, InferGetServerSidePropsType } from 'next'
import MovieButtonBack from '@/pages/movie/components/MovieButtonBack'
import MovieHeadingTitle from '@/pages/movie/components/MovieHeadingTitle'
import fetchAllMovie from '@/lib/movie/fetchAllMovie'
import InfiniteScroll from 'react-infinite-scroll-component'
import MovieCardItems from '../movie/components/MovieCardItems'

type Props = { movies: Movies[] }

type MoviesProps = { items: Movies[]; fetchMoreData: any }

export const Movies = async ({ items, fetchMoreData }: MoviesProps) => {
    return (
        <Row className="justify-content-start g-2 py-3">
            <Col>
                <InfiniteScroll
                    dataLength={items?.length}
                    next={fetchMoreData}
                    hasMore={true}
                    loader={
                        <div className="d-flex justify-content-center mx-auto py-3">
                            Sedang Memuat...
                        </div>
                    }
                    style={{ overflow: 'hidden' }}
                >
                    <div className="row row-cols-2 row-cols-lg-6 justify-content-arround g-3">
                        {items?.map((item, index) => (
                            <div key={index} className="col">
                                <MovieCardItems items={item} />
                            </div>
                        ))}
                    </div>
                </InfiniteScroll>
            </Col>
        </Row>
    )
}

export default function NowPlayingMovie({
    movies: initialMovies,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
    const [movies, setMovies] = useState(initialMovies)
    const [page, setPage] = useState<number>(1)
    const [isLoading, setIsLoading] = useState<boolean>(false)

    async function fetchMoreData() {
        const api: string = 'http://localhost:5000'
        const endpoint: string = 'movies'
        const response: Response = await fetch(
            `${api}/${endpoint}?page=${page}`
        )

        const newMovies: Movies[] = await response.json()

        setIsLoading(true)
        setTimeout(() => {
            setIsLoading(false)
            setMovies([...movies, ...newMovies])
            setPage(page + 1)
        }, 300)
    }

    return (
        <>
            <Head>
                <title>Sedang Tayang Di Bioskop</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Container className="position-relative py-5 pt-5 mt-5">
                <Row className="justify-content-start g-2 py-3">
                    <Col>
                        <Card
                            className="bg-dark"
                            style={{ borderRadius: '12px' }}
                        >
                            <Card.Body>
                                <MovieButtonBack />
                                <MovieHeadingTitle title="Sedang Tayang Di Bioskop" />
                            </Card.Body>
                        </Card>
                    </Col>
                </Row>

                <Movies items={movies} fetchMoreData={fetchMoreData()} />
            </Container>
        </>
    )
}

export const getServerSideProps: GetServerSideProps<Props> = async () => {
    const movies: Movies[] = await fetchAllMovie()

    return { props: { movies } }
}
